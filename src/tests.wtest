import sonidos.*
import armas.*
import jugador.*
import enemigos.*
import tablero.*
import pantallas.*
import wollok.game.*
import direcciones.*
import estadosDestruccion.*
import animacion.*


class NaveDePrueba {
	var property fueMovida = false
	var property fueDestruida = false
	var property estado
	const property animacion
	method mover(){
		fueMovida = true
	}
	
	method animarDestruccion(){
		fueDestruida = true
	}
	
	method estadoDestruccion(_estado){
		estado = _estado
	}
}

class CreadorDeBalasDePrueba{
	var property posicion = null
	method crear(_posicion){
		posicion = _posicion
	}
}


class AnimacionDePrueba{
	var property fueIniciada = false
	var property fueDetenida = false
	
	method iniciar(){
		fueIniciada = true
	}

	method detener(){
		fueDetenida = true
	}
}

describe "funcionalidadDelJuego"{
	
	method initialize(){
		game.clear()
		game.cellSize(20)
		game.width(40)
		game.height(30)
		
		sonidosManager.modoTest(true)
	
	}
	
  	test "nave enemiga se mueve cumpliendo la animacion" {
		const nave = new NaveEnemiga(position = game.at(5,5), agresion = 1, alColisionarConJugador = {})
		assert.equals(game.at(5,5), nave.position())
		
		nave.direccion(derecha)
		nave.mover()
		assert.equals(game.at(6,5), nave.position())

	}
	
	test"barra no debe salir del pantalla"{
		jugador.position(game.at(1,1))
		jugador.mover(izquierda)
		assert.equals(jugador.position(),game.at(0,1))
		assert.throwsException({jugador.mover(izquierda)})
	}
	
	
}


describe "flotaEnemiga" {
	
	const animacionDePrueba = new AnimacionDePrueba()
	const naveDePrueba = new NaveDePrueba(animacion = animacionDePrueba, estado = null)
	
	method initialize(){
		flotaEnemiga.agregar(naveDePrueba)
		flotaEnemiga.ejecutarAlMorir({})
	}
	
	test "No está muerta si tiene naves" {				
		assert.notThat(flotaEnemiga.estaMuerta())		
		assert.that(animacionDePrueba.fueIniciada())
	}
	
	test "Está muerta si no tiene naves" {				
		flotaEnemiga.remover(naveDePrueba)
		assert.that(flotaEnemiga.estaMuerta())
		//assert.that(naveDePrueba.fueDestruida())
	}
	
	test "Mueve a las naves de la flota" {
		assert.notThat(naveDePrueba.fueMovida())
		flotaEnemiga.mover()
		assert.that(naveDePrueba.fueMovida())
	}
}


describe "Estado PuedeSerDestruida" {

	test "Envia mensajes al ser ejecutado"{
		sonidosManager.modoTest(true)
		const animacionDePrueba = new AnimacionDePrueba()
		const naveDePrueba = new NaveDePrueba(animacion = animacionDePrueba, estado = null)
		flotaEnemiga.agregar(naveDePrueba)
		flotaEnemiga.ejecutarAlMorir({})
		const estado = new PuedeSerDestruida()
		estado.ejecutar(naveDePrueba)
		assert.equals(100, score.puntos())
		assert.that(naveDePrueba.fueDestruida())
		assert.that(flotaEnemiga.estaMuerta())
		assert.that(naveDePrueba.estado() != null)
	}
}

describe "Animaciones" {
	method initialize(){
		game.cellSize(20)
		game.width(40)
		game.height(30)
		
		sonidosManager.modoTest(true)

}
	
	
	test "Enemigo"{
		const naveAhora = new NaveEnemiga(position = game.at(2,5),agresion = null, alColisionarConJugador = null)
				
		assert.equals(naveAhora.image(), "enemigo-1.png")
		naveAhora.animacion().animar()
		assert.equals(naveAhora.image(), "enemigo-2.png")
		naveAhora.animacion().animar()
		assert.equals(naveAhora.image(), "enemigo-3.png")
		naveAhora.animacion().animar()
		assert.equals(naveAhora.image(), "enemigo-4.png")
		naveAhora.animacion().animar()
		assert.equals(naveAhora.image(), "enemigo-5.png")
		naveAhora.animacion().animar()
		assert.equals(naveAhora.image(), "enemigo-6.png")
	}
	test "MenuPrincipal"{
		const background = new AnimacionMenuPrincipal()
		game.addVisual(background)
		assert.equals(background.image(), "menu-1.png")
		background.animar()
		assert.equals(background.image(), "menu-2.png")
		background.animar()
		assert.equals(background.image(), "menu-3.png")
		background.animar()
		assert.equals(background.image(), "menu-4.png")
		background.animar()
		assert.equals(background.image(), "menu-5.png")
		background.animar()
		assert.equals(background.image(), "menu-6.png")
		background.animar()
		assert.equals(background.image(), "menu-7.png")
		background.animar()
		assert.equals(background.image(), "menu-8.png")
		
	}
	
}

describe "Direcciones"{
	
	const posicion = game.at(1, 1)
	
	test "El opuesto de derecha es izquierda y viceversa" {
		assert.equals(izquierda, derecha.opuesto())
		assert.equals(derecha, izquierda.opuesto())
	}
	
	test "El opuesto de arriba es abajo y viceversa" {
		assert.equals(arriba, abajo.opuesto())
		assert.equals(abajo, arriba.opuesto())
	}
	
	test "Los siguientes de cada direccion son correctos"{
		assert.equals(game.at(1, 2), arriba.siguiente(posicion))
		assert.equals(game.at(1, 0), abajo.siguiente(posicion))
		assert.equals(game.at(0, 1), izquierda.siguiente(posicion))
		assert.equals(game.at(2, 1), derecha.siguiente(posicion))		
	}	
}


describe "Tablero"{
	
	method initialize(){
		game.width(10)
		game.height(10)
	}
	
	test "Los puntos dados no pertenecen al tablero"{
		assert.notThat(tablero.pertenece(game.at(-1, -1)))
		assert.notThat(tablero.pertenece(game.at(10, 10)))
		assert.notThat(tablero.pertenece(game.at(5, 10)))
		assert.notThat(tablero.pertenece(game.at(10, 5)))
	}
	
	test "Los puntos dados pertenecen al tablero"{
		assert.that(tablero.pertenece(game.at(0, 0)))
		assert.that(tablero.pertenece(game.at(9, 9)))
		assert.that(tablero.pertenece(game.at(5, 9)))
		assert.that(tablero.pertenece(game.at(9, 5)))
	}
	
	
	test "Se fue por arriba"{
		assert.that(tablero.seFuePorArriba(game.at(5, 10)))
	}
	
}

describe "Score"{
	
	test "Avanza el número de oleada"{
		score.avanzarOleada()
		assert.equals(2, score.oleadaActual())
	}
	
	test "El texto del score es correcto"{
		score.aumentarPuntos()
		assert.equals("score: 100", score.text())
	}
	
	test "Resetear devuelve todo a cero"{
		score.aumentarPuntos()
		score.avanzarOleada()
		score.resetear()
		assert.equals(0, score.puntos())
		assert.equals(1, score.oleadaActual())
	}
}

describe "Jugador"{
	
	method initialize(){
		game.width(30)
		game.height(30)
		sonidosManager.modoTest(true)
	}
	
	test "Se mueve cuando la posición está dentro del tablero"{
		jugador.mover(derecha)
		assert.equals(game.at(21, 1), jugador.position())
	}
	
	test "Falla validación cuando se mueve y la posición está fuera del tablero"{
		jugador.position(game.at(29, 1))
		assert.throwsException({jugador.mover(derecha)})
	}
	
	test "Dispara bala en la posición correcta y disminuye cantidad de balas"{
		const creador = new CreadorDeBalasDePrueba()
		jugador.creadorDeBala(creador)
		jugador.disparar()
		assert.equals(game.at(20, 2), creador.posicion())
	}
	
	test "Falla validación cuando dispara y no tiene balas"{
		(1.. 50).forEach({x=> jugador.disparar()})
		assert.throwsException({jugador.disparar()})
	}
	
	test "Puede disparar cuando recarga balas"{
		(1.. 50).forEach({x=> jugador.disparar()})
		assert.notThat(jugador.tieneBalas())
		jugador.recargarBalas()
		assert.that(jugador.tieneBalas())
	}
	
}

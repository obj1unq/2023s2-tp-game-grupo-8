import sonidos.*
import armas.*
import jugador.*
import enemigos.*
import tablero.*
import pantallas.*
import wollok.game.*
import direcciones.*


class NaveDePrueba {
	var property fueMovida = false
	const property animacion
	method mover(){
		fueMovida = true
	}
}

class AnimacionDePrueba{
	var property fueIniciada = false
	
	method iniciar(){
		fueIniciada = true
	}
}

describe "funcionalidadDelJuego"{
	
	method initialize(){
		game.clear()
		game.cellSize(20)
		game.width(40)
		game.height(30)
		
		sonidosManager.modoTest(true)
	
	}
	
  	test "nave enemiga se mueve cumpliendo la animacion" {
		const nave = new NaveEnemiga(position = game.at(5,5), agresion = 1, alColisionarConJugador = {})
		assert.equals(game.at(5,5), nave.position())
		
		nave.direccion(derecha)
		nave.mover()
		assert.equals(game.at(6,5), nave.position())

	}
	
	test"barra no debe salir del pantalla"{
		jugador.position(game.at(1,1))
		jugador.mover(izquierda)
		assert.equals(jugador.position(),game.at(0,1))
		assert.throwsException({jugador.mover(izquierda)})
	}
	
	
}


describe "flotaEnemiga" {
	
	const animacionDePrueba = new AnimacionDePrueba()
	const naveDePrueba = new NaveDePrueba(animacion = animacionDePrueba)
	
	method initialize(){
		flotaEnemiga.agregar(naveDePrueba)
	}
	
	test "No está muerta si tiene naves" {				
		assert.notThat(flotaEnemiga.estaMuerta())		
		assert.that(animacionDePrueba.fueIniciada())
	}
	
	test "Está muerta si no tiene naves" {				
		flotaEnemiga.remover(naveDePrueba)
		assert.that(flotaEnemiga.estaMuerta())
		//assert.that(naveDePrueba.fueDestruida())
	}
	
	test "Mueve a las naves de la flota" {
		assert.notThat(naveDePrueba.fueMovida())
		flotaEnemiga.mover()
		assert.that(naveDePrueba.fueMovida())
	}
}
